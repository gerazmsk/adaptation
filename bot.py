#!/usr/bin/env python3
"""
Simple Financial Advisor Telegram Bot with OpenAI ChatGPT Integration
Russian-speaking financial advisor for established immigrants in the USA
"""

import os
import logging
import openai
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv
import threading
import time

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Configuration
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "8155289579:AAHG2OujfC2mnxcga4dp2GDFBXeFVOtn5sM")

# OpenAI Configuration
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "your-openai-api-key-here")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4")  # or "gpt-3.5-turbo" for cost efficiency

# Web server configuration for cloud deployment
PORT = int(os.getenv("PORT", 8080))

# Financial Advisor System Prompt
FINANCIAL_ADVISOR_PROMPT = """[–†–û–õ–¨]  
–¢—ã ‚Äî —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∏–º–º–∏–≥—Ä–∞–Ω—Ç–æ–≤ –≤ –°–®–ê.  
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º 25‚Äì55 –ª–µ—Ç, –∫–æ—Ç–æ—Ä—ã–µ –∂–∏–≤—É—Ç –≤ –°–®–ê –æ—Ç 1 –¥–æ 7 –ª–µ—Ç, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –æ—Ç $70 000 –≤ –≥–æ–¥, —É–∂–µ –∏–º–µ—é—Ç –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏ –ø–ª–∞–Ω–∏—Ä—É—é—Ç –æ—Å—Ç–∞—Ç—å—Å—è –∂–∏—Ç—å –≤ –°–®–ê.  

[–§–û–ö–£–°]  
–¢—ã –¥–∞—ë—à—å —Ç–æ–ª—å–∫–æ –æ–±—â—É—é –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∞ –Ω–µ –±—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∏–µ –∏–ª–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã.  
–¢—ã –æ–±—ä—è—Å–Ω—è–µ—à—å –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤ –°–®–ê.  

–ö–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã:  
- –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∑–∞—â–∏—Ç–∞ —Å–µ–º—å–∏ (–∂–∏–∑–Ω—å, –∑–¥–æ—Ä–æ–≤—å–µ, –¥–æ—Ö–æ–¥, –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π —É—Ö–æ–¥).  
- –ù–∞–∫–æ–ø–ª–µ–Ω–∏—è (–ø–µ–Ω—Å–∏—è, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–µ–π, —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞).  
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–∞—á–∞ –∞–∫—Ç–∏–≤–æ–≤ (–Ω–∞—Å–ª–µ–¥—Å—Ç–≤–æ, –∑–∞—â–∏—Ç–∞ –∫–∞–ø–∏—Ç–∞–ª–∞, –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω—ã–π –¥–æ—Ö–æ–¥).  

[–ü–ò–†–ê–ú–ò–î–ê –§–ò–ù–ê–ù–°–û–í–´–• –ù–£–ñ–î]  
–¢—ã –¥–æ–ª–∂–µ–Ω –≤—ã—è–≤–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ—Å—Ç—å —Ü–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–≤–∏–≥–∞—è—Å—å –æ—Ç –±–∞–∑–æ–≤—ã—Ö –∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–º:  
1. **–†–µ—à–µ–Ω–∏—è –ø–æ –∑–∞—â–∏—Ç–µ** ‚Äî —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –∂–∏–∑–Ω–∏, –∑–∞—â–∏—Ç–∞ –¥–æ—Ö–æ–¥–∞, –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π —É—Ö–æ–¥.  
2. **–†–µ—à–µ–Ω–∏—è –ø–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—é** ‚Äî –ø–µ–Ω—Å–∏–æ–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã, –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã, —Ñ–æ–Ω–¥—ã –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–µ—Ç–µ–π.  
3. **–†–µ—à–µ–Ω–∏—è –ø–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é –∫–∞–ø–∏—Ç–∞–ª–∞** ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–∞, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤.  

[–ò–ú–ú–ò–ì–†–ê–¶–ò–Ø]  
–¢—ã –º–æ–∂–µ—à—å –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ (ID, SSN, –∂–∏–ª—å—ë, —à–∫–æ–ª–∞), –Ω–æ –Ω–µ –¥–∞—ë—à—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –∏ –Ω–µ –≤—ã—Å—Ç—É–ø–∞–µ—à—å –∫–∞–∫ –∞–¥–≤–æ–∫–∞—Ç.  

[–¢–û–ù]  
‚Äî –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π, —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π.  
‚Äî –û–±—ä—è—Å–Ω—è–π —Ç–∞–∫, —á—Ç–æ–±—ã —á–µ–ª–æ–≤–µ–∫ —á—É–≤—Å—Ç–≤–æ–≤–∞–ª —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏ –ø–æ–Ω–∏–º–∞–ª —Å–≤–æ–∏ —à–∞–≥–∏.  
‚Äî –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏–º–µ—Ä—ã –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.  

[–°–¢–†–£–ö–¢–£–†–ê –†–ê–ë–û–¢–´]  
1. –°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–ß—Ç–æ –¥–ª—è –≤–∞—Å —Å–µ–π—á–∞—Å –≤–∞–∂–Ω–µ–µ ‚Äî –∑–∞—â–∏—Ç–∞ —Å–µ–º—å–∏, –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞?¬ª).  
2. –î–∞–π –æ–±–∑–æ—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ä–µ—à–µ–Ω–∏–π (–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–º–ø–∞–Ω–∏–π, —Ç–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤).  
3. –û–±—ä—è—Å–Ω–∏, –ø–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç —É—Ä–æ–≤–µ–Ω—å –≤–∞–∂–µ–Ω —Å–µ–π—á–∞—Å.  
4. –î–æ–±–∞–≤—å —Å–æ–≤–µ—Ç—ã, —á—Ç–æ –º–æ–∂–Ω–æ –∏–∑—É—á–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ –±–ª–∏–∂–∞–π—à–∏—Ö –Ω–µ–¥–µ–ª—å.  
5. –í –∫–æ–Ω—Ü–µ –ø—Ä–µ–¥–ª–∞–≥–∞–π –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–•–æ—á—É —É–∑–Ω–∞—Ç—å –ø—Ä–æ –∑–∞—â–∏—Ç—É —Å–µ–º—å–∏¬ª, ¬´–ò–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –ø–µ–Ω—Å–∏–æ–Ω–Ω—ã–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è¬ª, ¬´–ö–∞–∫ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–ø–∏—Ç–∞–ª¬ª).  

[–ü–†–ò–ú–ï–† –ü–û–í–ï–î–ï–ù–ò–Ø]  
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ¬´–° —á–µ–≥–æ –Ω–∞—á–∞—Ç—å, –µ—Å–ª–∏ —è –¥—É–º–∞—é –æ –±—É–¥—É—â–µ–º —Å–µ–º—å–∏?¬ª  
–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç:  
- –û–±—ä—è—Å–Ω—è–µ—Ç, —á—Ç–æ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç ‚Äî —ç—Ç–æ –∑–∞—â–∏—Ç–∞: —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –∂–∏–∑–Ω–∏, –¥–æ—Ö–æ–¥–∞, –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π —É—Ö–æ–¥.  
- –†–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –∫–æ–≥–¥–∞ –∑–∞—â–∏—Ç–∞ –æ–±–µ—Å–ø–µ—á–µ–Ω–∞, —Å–ª–µ–¥—É—é—â–∏–º —à–∞–≥–æ–º –±—É–¥—É—Ç –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è (–ø–µ–Ω—Å–∏—è, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–µ–π).  
- –í –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–µ ‚Äî —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–∞.  
- –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏: [–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∑–∞—â–∏—Ç–∞] [–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è] [–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞].  

[–§–û–†–ú–ê–¢ –í–´–í–û–î–ê]  
‚Äî –ö—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä —Å–∏—Ç—É–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.  
‚Äî –ß—ë—Ç–∫–∏–µ –∏ –ø—Ä–æ—Å—Ç—ã–µ —à–∞–≥–∏/–∏–¥–µ–∏.  
‚Äî –û–±—ä—è—Å–Ω–µ–Ω–∏–µ ¬´–ø–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ¬ª.  
‚Äî –í –∫–æ–Ω—Ü–µ 2‚Äì3 –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""

class FinancialAdvisorBot:
    """Simple Financial Advisor Bot with OpenAI ChatGPT integration"""
    
    def __init__(self):
        self.user_conversations = {}  # Store conversation history for AI
        
        # Initialize OpenAI
        if OPENAI_API_KEY and OPENAI_API_KEY != "your-openai-api-key-here":
            openai.api_key = OPENAI_API_KEY
            self.openai_available = True
            logger.info("‚úÖ OpenAI API configured")
        else:
            self.openai_available = False
            logger.warning("‚ö†Ô∏è OpenAI API key not configured")
    
    async def get_ai_response(self, user_message: str, user_id: int) -> str:
        """Get AI response from OpenAI using the financial advisor system prompt"""
        if not self.openai_available:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, AI —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        
        try:
            # Get or create conversation history for this user
            if user_id not in self.user_conversations:
                self.user_conversations[user_id] = [
                    {"role": "system", "content": FINANCIAL_ADVISOR_PROMPT}
                ]
            
            # Add user message to conversation
            self.user_conversations[user_id].append({"role": "user", "content": user_message})
            
            # Get AI response
            response = openai.ChatCompletion.create(
                model=OPENAI_MODEL,
                messages=self.user_conversations[user_id],
                max_tokens=1000,
                temperature=0.7
            )
            
            ai_response = response.choices[0].message.content
            
            # Add AI response to conversation history
            self.user_conversations[user_id].append({"role": "assistant", "content": ai_response})
            
            # Keep conversation history manageable (last 10 messages)
            if len(self.user_conversations[user_id]) > 10:
                # Keep system prompt and last 9 messages
                self.user_conversations[user_id] = (
                    [self.user_conversations[user_id][0]] + 
                    self.user_conversations[user_id][-9:]
                )
            
            return ai_response
            
        except Exception as e:
            logger.error(f"Error getting AI response: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command"""
        user_id = update.effective_user.id
        
        # Clear any previous conversation for this user
        if user_id in self.user_conversations:
            del self.user_conversations[user_id]
        
        greeting_text = (
            "ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ò–º–º–∏–≥—Ä–∞–Ω—Ç–æ–≤!**\n\n"
            "–Ø ‚Äî –≤–∞—à —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –¥–ª—è –∏–º–º–∏–≥—Ä–∞–Ω—Ç–æ–≤ –≤ –°–®–ê. "
            "–ü–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∑–∞—â–∏—Ç–æ–π —Å–µ–º—å–∏, –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è–º–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–∞–ø–∏—Ç–∞–ª–∞.\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é, –∏ —è –ø–æ–º–æ–≥—É —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–ª–∞–Ω."
        )
        
        await update.message.reply_text(greeting_text, parse_mode='Markdown')
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle all text messages from users"""
        user_id = update.effective_user.id
        user_message = update.message.text
        
        # Show typing indicator
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        
        # Get AI response
        ai_response = await self.get_ai_response(user_message, user_id)
        
        # Send the AI response back to the user
        await update.message.reply_text(
            f"ü§ñ **AI –ü–æ–º–æ—â–Ω–∏–∫:**\n\n{ai_response}",
            parse_mode='Markdown'
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /help command"""
        help_text = """
ü§ñ **–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ò–º–º–∏–≥—Ä–∞–Ω—Ç–æ–≤ - –°–ø—Ä–∞–≤–∫–∞**

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ **AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç** - –ü–æ–ª—É—á–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–ª–∞–Ω—ã
‚Ä¢ **–†—É—Å—Å–∫–æ—è–∑—ã—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞** - –ü–æ–º–æ—â—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
‚Ä¢ **–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –∑–Ω–∞–Ω–∏—è** - –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –°–®–ê

**–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
1. –ù–∞—á–Ω–∏—Ç–µ —Å /start –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞
2. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é
3. –ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–ª–∞–Ω
4. –ó–∞–¥–∞–≤–∞–π—Ç–µ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã

**–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ "–° —á–µ–≥–æ –Ω–∞—á–∞—Ç—å, –µ—Å–ª–∏ —è –¥—É–º–∞—é –æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∑–∞—â–∏—Ç–µ —Å–µ–º—å–∏?"
‚Ä¢ "–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–µ–Ω—Å–∏–æ–Ω–Ω—ã–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –≤ –°–®–ê?"
‚Ä¢ "–ö–∞–∫ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –ø—Ä–∏—É–º–Ω–æ–∂–∏—Ç—å –∫–∞–ø–∏—Ç–∞–ª?"

–ü—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏—Ç–µ —Å /start –∏ –ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã!
        """
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    def start_web_server(self):
        """Start a simple web server for cloud deployment health checks"""
        try:
            import http.server
            import socketserver
            
            class HealthCheckHandler(http.server.SimpleHTTPRequestHandler):
                def do_GET(self):
                    if self.path == '/health':
                        self.send_response(200)
                        self.send_header('Content-type', 'text/plain')
                        self.end_headers()
                        self.wfile.write(b'Bot is running!')
                    else:
                        self.send_response(200)
                        self.send_header('Content-type', 'text/html')
                        self.end_headers()
                        self.wfile.write(b'<h1>Financial Advisor Bot is Running!</h1>')
            
            with socketserver.TCPServer(("", PORT), HealthCheckHandler) as httpd:
                logger.info(f"Web server started on port {PORT}")
                httpd.serve_forever()
        except Exception as e:
            logger.error(f"Web server error: {e}")
    
    def run(self):
        """Start the bot"""
        # Create application
        application = Application.builder().token(TELEGRAM_TOKEN).build()
        
        # Add handlers
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # Start web server in a separate thread for cloud deployment
        web_server_thread = threading.Thread(target=self.start_web_server, daemon=True)
        web_server_thread.start()
        
        # Start the bot
        logger.info(f"Starting Financial Advisor Bot with OpenAI ChatGPT integration on port {PORT}...")
        application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    bot = FinancialAdvisorBot()
    bot.run()
